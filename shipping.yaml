- name: configure shipping component
  hosts: shipping
  become: yes
  tasks:
  - name: install maven 
    ansible.builtin.package:
      name: maven
      state: present

  - name: Create a directory for roboshop user
    ansible.builtin.file:
      path: /app
      state: directory

  - name: Add application User
    ansible.builtin.user:
      name: roboshop
      system: true
      home: /app
      # create_home: no
      shell: /sbin/nologin

  - name: Download the application code to created app directory.
    ansible.builtin.get_url:
      url: https://roboshop-artifacts.s3.amazonaws.com/shipping-v3.zip
      dest: /tmp/shipping.zip

  - name: unzip the downloaded files into user app directory
    ansible.builtin.unarchive:
      src: /tmp/shipping.zip
      dest: /app
      remote_src: yes

  - name: download the dependencies
    ansible.builtin.command: mvn clean package 
    args:
      chdir: /app

  - name: rename the target jar folder
    ansible.builtin.command: mv target/shipping-1.0.jar shipping.jar 
    args:
      chdir: /app

  - name: copy the shipping service file
    ansible.builtin.copy:
      src: shipping.service
      dest: /etc/systemd/system/shipping.service

  - name: daemon reload
    ansible.builtin.systemd_service:
      daemon_reload: true

  - name: start and enable shipping service
    ansible.builtin.service:
      name: shipping
      state: restarted
      enabled: yes

  - name: install mysql client
    ansible.builtin.package:
      name: mysql
      state: present

  - name: install python libraries to connect sql server
    ansible.builtin.pip:
      name: "{{ item }}"
      state: present 
    loop:
    - PyMySQL
    - cryptography
#-----------------------------------------------------------------

  - name: Check if MySQL user 'shipping' exists
    community.mysql.mysql_query:
      login_user: root
      login_password: RoboShop@1
      login_host: mysql.nanda.cyou
      query: SELECT User FROM mysql.user WHERE User = 'shipping';
    register: is_user_present

  - name: Print if shipping exists
    debug:
      msg: "✅ User 'shipping' exists"
    when: is_user_present.query_result[0] | length > 0

  - name: Print if shipping does not exist
    debug:
      msg: "❌ User 'shipping' does NOT exist"
    when: is_user_present.query_result[0] | length == 0

  - name: check does it able to connect 
    community.mysql.mysql_info:
      login_user: shipping
      login_password: RoboShop@1
      login_host: mysql.daws84s.site
      login_db: cities
    when: is_user_present.query_result[0] | length > 0
    register: db_connection
    ignore_errors: yes

  - name: creating user in mysql db
  tags:
  - import_user
  community.mysql.mysql_db:
    name: all
    login_user: root
    login_password: RoboShop@1
    login_host: mysql.daws84s.site
    state: import
    target: "{{ item }}"
  loop:
  - /app/db/app-user.sql

    - name: creating DB and load data
    tags:
    - import_DB
    community.mysql.mysql_db:
      name: all
      login_user: root
      login_password: RoboShop@1
      login_host: mysql.daws84s.site
      state: import
      target: "{{ item }}"
    loop:
    - /app/db/schema.sql
    - /app/db/master-data.sql
    

    - name: restart shipping
    tags:
    - import
    ansible.builtin.service:
      state: restarted
      name: shipping
  
